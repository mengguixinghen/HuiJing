第四章 程序控制结构
一.顺序控制
1.介绍
程序从上到下逐行地执行，中间没有任何判断和跳转.
2.注意事项
执行语句1 ——> 执行语句2 ——> …… ——> 执行语句n
二.分支控制(if,else,switch)
1.分支控制if-else
让程序有选择的执行，分支控制有三种
(1).单分支
基本语法
if(条件表达式){
       执行代码块;(可以有多条语句)
}
说明:当条件表达式为true时，就会执行{}的代码.如果为false,就不执行.
     特别说明,如果{}中只有一条语句,则可以不用{},建议写上{}.
单分支对应的流程图
      ｜       false
  条件表达式————————
      ｜           |
     true          |
      |            |
  执行代码块         |
      ｜——————————— |
      ｜
(2).双分支
基本语法
if(条件表达式){
     执行代码块1;
}
else{
     执行代码块2;
}
说明:当条件表达式成立，即执行代码块1,否则执行代码块2.如果执行代码块只有一条语句,则{}可以省略，否则，不能省略.
双分支对应的流程图
  true        |         false
  ——————— 条件表达式—————————
 ｜                          ｜
 ｜                          ｜
执行代码块1              执行代码块2
 ｜                          ｜
 ｜                          ｜
  ———————————————————————————
               ｜
               ｜
(3).多分支
基本语法
if(条件表达式){
  执行代码块1;
}
else if(条件表达式2){
  执行代码块2;
}
……
else{
  执行代码块n;
}
说明:1.当条件表达式1成立时，即执行代码块1.
     2.如果表达式1不成立，才去判断表达式2是否成立.
     3.如果表达式2成立，就执行代码块2.
     4.以此类推，如果所有的表达式都不成立.
     5.则执行else的代码块,注意，只能有一个执行入口.
特别说明:多分支可以没有else.如果所有条件表达式都不成立，则一个执行入口都没有.
多分支的流程图

    ｜
    ｜
条件表达式1——————false————
    ｜                   ｜
   true             条件表达式2————false
    ｜                   ｜          ｜
语句代码块1             true          ｜
    ｜                   ｜         ...————false——
    ｜               语句代码块2                  ｜
    ｜———————————————————｜                      ｜ 
    ｜                                      语句代码块n
    ｜                                           ｜
    ｜————————————————————————————————————————————
    ｜ 

(4).嵌套分支
介绍
在一个分支结构中又完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支。规范:不要超过3层.(可读性不好)
基本语法
if(){
     if(){
       //if-else...
     }else{
     //if-else
     }
}
(5).switch分支结构
基本语法
swich(表达式){
      case 常量1://当……
      语句块1;
      break;
      case 常量2;
      语句块2;
      break;
      ...
      case 常量n;
      语句块n;
      break;
      default;
      default语句块;
      break;
说明:1.switch 关键字,表示switch分支
     2.表达式对应一个值
     3.case 常量1:当表达式的值等于常量1，就执行语句块1
     4.break:表示退出switch.
     5.如果和case 常量1匹配，就执行语句块1，如果没有匹配，就继续匹配case 常量2
     6.如果一个都没有匹配上,执行default.  
switch流程图
计算表达式的值
     |
     |        false            false            false
  等于常量1——————————等于常量2————————等于常量n————————
     |                   ｜              ｜           ｜
     |true               ｜true          ｜true       ｜
     |                   ｜              ｜           ｜
 执行语句块1     ———— 执行语句块2   —— 执行语句块n  default语句块 
     |      没有 ｜       ｜    没有｜    ｜         ｜ ｜
     |          ｜       ｜        ｜    ｜     没有｜ ｜
 是否有break—————    是否有break————  是否有break———— ｜
     |有                 ｜有            ｜有        ｜
     |                   ｜              ｜         ｜
      ———————————————————｜————————————————————————————
                         ｜
                      结束switch
switch注意事项和细节讨论
1.表达式数据类型,应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是int.
2.switch(表达式)中表达式的返回值必须是:(byte,short,int,char,enum[枚举],String)
3.case子句中的值必须是常量，或者是常量表达式，而不是变量.
4.default子句是可选的，当没有匹配的case时，执行default.如果没有default子句，又没有匹配任何常量，则没有输出.
5.break语句用来在执行完一个case分支后使程序跳出switch语句块;如果没有写break，程序会顺序执行到switch结尾.
switch和if的比较
1.如果判断的具体数值不多，而且符合byte,short,int,char,enum[枚举],String这6种类型.虽然两个语句都可以使用，建议使用switch语句.
2.其它情况:对区间判读，对结果为boolean类型判断，使用if,if的使用范围更广.
三.循环控制(for,while,dowhile,多重循环)
1.for循环控制
1.1基本语法
for(循环变量初始化;循环条件;循环变量迭代){
    循环操作(语句);
}
说明:(1).for关键字，表示循环控制
     (2).for有四要素:1.循环变量初始化 2.循环条件 3.循环操作 4.循环变量迭代
     (3).循环操作,这里可以有多条语句，也就是我们要循环执行的代码.
     (4).如果循环操作(语句)只有一条语句，可以省略{}，建议不要省略.
1.2for循环执行流程图
                  ｜
                  ｜
            循环变量初始化
                  ｜
                  ｜
         ————— 循环条件——————————
        |         ｜            ｜
  循环变量迭代    ｜              ｜
        |         ｜T           ｜F
        |         ｜            ｜
         ————循环操作(语句）      ｜
                                ｜
              for循环结束———————
                   |
                   |继续
                   |  
1.3注意事项和细节说明
(1).循环条件是返回一个布尔值的表达式.
(2).for(;循环判断条件;)中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略.
(3).循环初始值可以有多条初始化语句,但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开.
(4).使用内存分析法.
2. while循环控制
2.1 基本语法
循环变量初始化;
while(循环条件){
      循环体(语句);
      循环变量迭代;
}
说明:(1).while循环也有四要素.
     (2).只是四要素放的位置不一样.
2.2 while循环流程图
             循环变量初始化
                   ｜
                   ｜
           —————循环条件————————
          ｜       ｜          ｜
          ｜F      ｜T         ｜
          ｜  循环体;           ｜
          ｜  循环变量迭代;————
          ｜
           ————while结束  
2.3 注意事项和细节说明
(1).循环条件是返回一个布尔值的表达式.
(2).while循环是先判断再执行语句. 
3. do while循环控制
3.1 基本语法
循环变量初始化;
do{
      循环体(语句);
      循环变量迭代;
}while(循环条件);
说明:(1).do while是关键字，也有四要素，只是位置不一样
     (2).先执行，再判断，也就是说，一定会执行一次
     (3).最后有一个分号
     (4).while和do while区别 
3.2 do while循环流程图
         循环变量初始化;
                |
                |
             循环体(语句)
        ———— 循环变量的迭代
       |        
       |T       
       |_____循环判断
                |
                |F
             退出do-while
3.3 注意事项和细节说明
(1).循环条件是返回一个布尔值的表达式.
(2).do while循环是先执行，再判断，因此它至少执行一次.
4.多重循环控制(难点！重点！)
4.1介绍
(1).将一个循环放到另一个循环体内，就形成了嵌套循环.其中，for,while,do while均可以作为外层循环和内层循环.[建议一般使用两层，最多不要超过3层，否则，代码的可读性很差]
(2).实质上，嵌套循环就是把内层循环当成外层循环的循环体.当只有内层循环的循环条件为false时，才会完成跳出内层循环，才可结束外层的当次循环，开始下一次的循环.
(3).设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次.
四.跳转控制语句-break
1.基本介绍
break语句用于终止某个语句块的执行，一般使用在switch或者循环(for,while)中
2.基本语法
{......
 break;
 ......
}
流程图
           while循环变量初始化
                   ｜
                   ｜
           —————循环条件————————
          ｜       ｜          ｜
          ｜F      ｜T         ｜
          ｜  循环体;           ｜
          ｜  循环变量迭代;————
          ｜ if(条件){...break;}
          ｜       ｜
          ｜       ｜
           ————while结束
3.注意事项和细节说明
(1).break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块.
(2).标签的基本使用
    label1:{ ......
    label2:    { ......
    label3:        { ......
                      break label2;
                      ......
                   }
                }
            }
(3).break语句可以指定退出哪层
(4).label1是标签，由程序员指定
(5).break后指定到哪个label就退出到哪里
(6).在实际开发中，尽量不要使用标签
(7).如果没有指定break，默认退出最近的循环体
(8). //比较输入名字和字符串是否正确
	    //补充说明字符串的比较使用方法 equals
	    if("丁真".equals(name) && "666".equals(passwd)){
	    	System.out.println("登录成功");
	    	break;
	    }
五.跳转控制语句-continue
1.基本介绍
(1).continue语句用于结束本次循环，继续执行下一次循环.
(2).continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的标签的使用规则一样.
2.基本语法:
{ ......
  continue;
  ......
}
以while使用continue为例，画出示意图.
           while循环变量初始化
                   ｜
                   ｜
           —————循环条件————————
          ｜       ｜        |  ｜
          ｜F      ｜T       |  ｜
          ｜  循环体;         |  ｜
          ｜  循环变量迭代;——|———
          ｜ if(条件){...continue;}
          ｜       
          ｜       
           ————while结束
六.跳转控制语句-return
1.介绍
return使用在方法，表示跳出所在的方法.注意:如果return写在main方法，退出程序.

