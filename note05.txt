第五章 数组、排序和查找
一.数组
1. 介绍
数组可以存放多个同一类型的数据.数组也是一种数据类型，是引用类型.
即:数组就是一组数组.
2. 数组的使用
2.1 使用方式1-动态初始化
2.1.1 数组的定义
数据类型 数组名[] = new 数据类型[大小]
int a[] = new int[5];//创建了一个数组，名字a，存放5个int.
说明:这是定义数组的一种方法.
2.1.2 数组的引用
数组名[下标/索引/index] 比如:你要使用a数组的第1个数 a[0]
数组的下标是从0开始.
可以通过数组名.length 得到数组的大小/长度.
2.2 使用方式2-动态初始化
2.2.1 先声明数组
      语法:数据类型 数组名[]; 也可以数据类型[] 数组名;
      int a[]; 或者 int[] a;
2.2.2 创建数组
      语法:数组名 = new 数据类型[大小];
      a = new int[10];
2.3 使用方式3-静态初始化
2.3.1 初始化数组
      语法:数据类型 数组名[] = {元素值，元素值......}
      int a[] = {2,5,6,7,8,89,90,34,56},如果知道数组有多少元素，具体值
      上面的用法相当于: int a[] = new int[9];
                        a[0] = 2;a[1] = 5;a[2] = 6;a[3] = 7;a[4] = 8;
                        a[5] = 89;a[6] = 90;a[7] = 34;a[8] = 56; 
2.4 数组使用注意事项和细节
    (1).数组是多个相同类型数据的组合，实现对这些数据的统一管理.
    (2).数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用.
    (3).数组创建后，如果没有赋值，有默认值int 0,short 0,byte 0,long 0,float 0.0,double 0.0,char \u0000,boolean false,String null.
    (4).使用数组的步骤:1.声明数组并开辟空间 2.给数组各个元素赋值 3.使用数组
    (5).数组的下标是从0开始的.
    (6).数组下标必须在指定范围内使用，否则报:下标越界异常，比如 int[] arr = new int[5];则有效下标为0-4.
        即数组的下标/索引 最小:0 最大数组:长度-1.
    (7).数组属引用类型，数组型数据是对象(object).
3. 数组赋值机制
(1).基本数据类型赋值，赋值方式为值拷贝，这个值就是具体的数据，而且相互不影响.
int n1 = 2;int n2 = n1;//n2的变化不会影响n1的值
(2).数组在默认情况下是引用传递，赋的值是地址.
    //是一个地址，arr2变化会影响到arr1
	    int[] arr1 = {1,2,3};
	    int[] arr2 = arr1;//把arr1赋给arr2
	    arr2[0] = 10;
	    for(int i = 0;i < arr1.length;i++){
	    System.out.println(arr1[i]);//10,2,3
	    }
(3).数组拷贝(内容复制)
	    //将 int[] arr1 = {10,20,30};拷贝到arr2数组.要求:数据空间是独立的
	    int[] arr1 = {10,20,30};
	    //创建一个新的数组arr2，开辟新的数据空间
	    //大小 arr1.length;
	    int arr2[] = new int[arr1.length];
	    for(int i = 1;i < arr1.length;i++){
	    	arr2[i]=arr1[i];
	    }
	    //修改 arr2,不会对arr1有影响.
	    arr2[0] = 100;
	    //输出arr1
	    System.out.println("====arr1的元素====");
	    for(int i = 0;i < arr1.length;i++){
	    System.out.println(arr1[i]);//10,20,30
	    }
	    //输出arr2
	    System.out.println("====arr2的元素====");
	    for(int i = 0;i < arr1.length;i++){
	    System.out.println(arr2[i]);//100,20,30
	    }
二.排序
1. 介绍
排序是将多个数据，依指定的顺序进行排列的过程.
排序的分类:
(1). 内部排序:
     指将需要处理的所有数据都加载到内部存储器中进行排序.包括(交换式排序法、选择式排序法和插入式排序法);
(2). 外部排序法:
     数据量过大，无法全部加载到内存中，需要借助外部存储进行排序.包括(合并排序法和直接合并排序法).
2.冒泡排序法
  冒泡排序的基本思想是:通过对待排序序列从后向前(从下标较大的元素开始),依次比较相邻元素的孩值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就像水底下的气泡一样逐渐向上冒.
3.冒泡排序法案例
	    //将五个无序：24,69,80,57,13 使用冒泡排序法将其排成一个从小到大的有序数列。
	    //思路分析:
	    //数组{24,69,80,57,13}
	    //第1轮排序:目标把最大的数放在最后
	    //第1次排序:{24,69,80,57,13}
	    //第2次排序:{24,69,80,57,13}
	    //第3次排序:{24,69,57,80,13}
	    //第4次排序:{24,69,57,13,80}

	    //第2轮排序:目标把第二大的数放在倒数第二位置
	    //第1次排序:{24,69,57,13,80}
	    //第2次排序:{24,57,69,13,80}
	    //第3次排序:{24,57,13,69,80}

	    //第3轮排序:目标把第三大的数放在倒数第三位置
	    //第1次排序:{24,57,13,69,80}
	    //第2次排序:{24,13,57,69,80}

	    //第4轮排序:目标把第三大的数放在倒数第四位置
	    //第1次排序:{13,57,57,69,80}
三.查找
1.顺序查找
(1) 有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏: 从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】 
    要求: 如果找到了，就提示找到，并给出下标值。
	  思路分析
	  1.定义一个字符串数组.
	  2.接收用户输入，遍历数组,逐一比较。如果有，则提示信息，并退出.
	  //定义字符串数组
	  String names[] = {"白眉鹰王","金毛狮王","紫衫龙王","青翼蝠王"};
	  Scanner scanner = new Scanner(System.in);
	  System.out.println("请输入一个名称:");
	  String findName = scanner.next();
	  int index = -1;
	  for(int i = 0;i < names.length;i++){
	  	//如果输入的名称就是当前元素
	  	if(findName.equals(names[i])){
	  		System.out.println("恭喜找到" + findName);
	  		System.out.println("下标=" + i);
	  		//把i 保存到index
	  		index = i;
	  		break;//退出
	  	}
	  }
	  //经典方法，如果索引没有发生改变，则没有找到.
	  if(index == -1){
	  	System.out.println("Sorry,没有找到" + findName);
	  }
2.二分查找
四.多维数组--二维数组
1.应用场景:五子棋游戏中的棋盘
2.二维数组的使用
2.1 使用方式1:动态初始化
(1).语法: 类型[][] 数组名=new 类型[大小][大小]
(2).比如: int a[][]=new int[2][3]
2.2 使用方式2:动态初始化
(1).先声明:类型 数组名[][];
(2).再定义(开辟空间) 数组名 = new 类型[大小][大小]
(3).赋值(有默认值，比如int类型的就是0)
2.3 使用方式3:动态初始化-列数不确定
/*
   请用二维数组输出如下图形
      1
      2 2
      3 3 3
*/
      
  //创建二维数组，一个有3个一维数组的二维数组，但是每个一维数组还没开数据空间
	      int arr[][] = new int[3][];
	      for(int i = 0;i < arr.length;i++){//遍历arr每个一维数组
	      	//给每个一维数组开空间
	      	//如果没有给一维数组new，那么arr[i]就是null.
	      	arr[i] = new int[i + 1];
	      	//遍历一维数组，并给一维数组的每个元素赋值
	      	for(int j = 0;j < arr[i].length;j++){
	      		arr[i][j]= i + 1;
	      	}
	      }
	      for(int i = 0;i < arr.length;i++){
	      	for(int j = 0;j < arr[i].length;j++){
	      		System.out.print(arr[i][j] + " ");
	      		}
	      		System.out.println();
	      	}
2.4 使用方式4:静态初始化
(1).定义 类型 数组名[][]={{值1,值2...},{值1,值2...},...,{值1,值2...}};
(2).比如:int[][] arr = {1,1,1},{8,8,9},{100}};
         //1.定义了一个二维数组arr. 2.arr有三个元素(每个元素都是一维数组)
         //3.第1个一维数组有3个元素，第2个一维数组有3个元素，第3个一维数组有1个元素.
3.注意事项
(1).一维数组的声明方式有:
    int[] x 或者 int x[]
(2).二维数组的声明方式有:
    int[][] y或者 int[] y[]或者int y[][]
(3).二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同.
  比如: map[][]是一个二维数组.
        map[][] = {{1,2},{3,4,5}}
    由map[0]是一个含有两个元素的一维数组，map[1]是一个含有三个元素的一堆数组构成，也称为列数不等的二维数组. 
(4).arr[i]表示二维数组的第i个元素.比如arr[0]表示二维数组的第一个元素
(5).arr[i].length得到对应的每个一维数组的长度.
(6).System.out.println("二维数组的元素个数=" + arr.length);
(7).二维数组的每个元素是一维数组,所以如果需要得到每个一维数组的值还需要再次遍历.
(8).访问第(i+1)个一维数组的第(j+1)个值.arr[i][j];

