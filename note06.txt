第六章 面向对象编程(基础部分)
一. 类与对象
1.类和对象的区别和联系
(1). 类是抽象的，概念的，代表一类事物,比如人类,猫类.., 即它是数据类型. 
(2). 对象是具体的，实际的，代表一个具体事物, 即是实例.
(3). 类是对象的模板，对象是类的一个个体，对应一个实例.
2.属性概念
2.1 基本介绍
(1).从概念或叫法上看:成员变量=属性=field(字段)(即成员变量是用来表示属性的，授课中，统一叫属性).
(2).属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。比如定义猫类的 int age 就是属性.
2.2 注意事项和细节说明
(1). 属性的定义语法同变量，示例：访问修饰符 属性类型 属性名; 
     访问修饰符:控制属性的访问范围
     有四种访问修饰符 public, proctected, 默认, private  
(2). 属性的定义类型可以为任意类型，包含基本类型或引用类型 
(3). 属性如果不赋值，有默认值，规则和数组一致。
     具体说: int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000， boolean false，String null
3. 如何创建对象
(1).先声明再创建
    Cat cat;//声明对象 cat
    cat = new Cat();//创建
(2).直接创建
    Cat cat = new Cat();
4.如何访问属性
基本语法
对象名.属性名;
System.out.println("第一只猫信息:" + cat1.name + "\t" 
		+ cat1.age + "\t" + cat1.color +"\t" + cat1.weight);
5. 类和对象的内存分配机制
5.1 Java内存的结构分析
(1).栈:一般存放基本数据类型(局部变量,如:int)
(2).堆:存放对象(Cat cat,数组等)
(3).方法区:常量池(常量，比如字符串)，类加载信息
5.2 Java创建对象的流程简单分析
Person p = new Person();
p.name = "jack";
p.age = 10;
(1).先加载Person类信息(属性和方法信息,只会加载一次)
(2).在堆中分配空间，进行默认初始化.
(3).把地址赋给p，p就指向对象.
(4).进行指定初始化，比如p.name = "jack";p.age = 10;
二. 成员方法
1. 基本介绍
在某些情况下，我们要需要定义成员方法(简称方法)。比如人类:除了有一些属性外( 年龄，姓名..),
还有一些行为比如:可以说话、跑步..,通过学习，还可以做算术题。这时就要用成员方法才能完成。
2. 成员方法快速入门 
(1).添加speak成员方法,输出“我是一个好人”
(2).添加cal01成员方法,可以计算从1+..+1000的结果
(3).添加cal02成员方法,该方法可以接收一个数n，计算从1+..+n 的结果
(4).添加getSum成员方法,可以计算两个数的和
3.方法调用小结
(1).当程序执行到方法时，就会开辟一个独立的空间(栈空间).
(2).当方法执行完毕时，或者执行到return语句时，就会返回.
(3).返回到调用方法的地方.
(4).返回后，继续执行方法后面的代码.
(5).当main方法(栈)执行完毕后，整个程序退出.
4.优点
(1).提高代码的重复性.
(2).可以将实现的细节封装起来，然后供其他用户来调用即可.
5.成员方法的定义
public(访问修饰符) 返回数据类型 方法名（形参列表..）{//方法体 
      语句；
      return 返回值; 
}
(1). 形参列表：表示成员方法输入cal(int n), getSum(int num1, int num2).
(2). 返回数据类型：表示成员方法输出, void 表示没有返回值.
(3). 方法主体：表示为了实现某一功能代码块.
(4). return 语句不是必须的.
6.注意事项和使用细节
6.1 访问修饰符
作用是控制方法使用的范围. 
如果不写默认访问，[有四种: public, protected, 默认, private].
6.2 返回数据类型 
(1).一个方法最多有一个返回值.  
(2).返回类型可以为任意类型，包含基本类型或引用类型(数组，对象).  
(3).如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return值; 而且要求返回值类型必须和return的值类型一致或兼容. 
(4).如果方法是void，则方法体中可以没有return语句，或者只写return;
6.3 方法名 
遵循驼峰命名法，最好见名知义，表达出该功能的意思即可, 比如得到两个数的和 getSum, 开发中按照规范
6.4 参数列表
(1).一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如getSum(int n1,int n2).
(2).参数类型可以为任意类型，包含基本类型或引用类型，比如printArr(int[][] map).
(3).调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数![getSum]
(4).方法定义的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，简称实参，实参和形参的类型要一致或兼容，个数、顺序必须一致!
6.5 方法体
里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里面不能再定义方法！即:方法不能嵌套定义.
6.6 方法细节调用说明
(1).同一个类中的方法调用:直接调用即可.比如print(参数);
(2).跨类中的方法A类调用B类方法:需要通过对象名调用.比如对象名.方法名(参数);
(3).特别说明一下:跨类的方法调用和方法的访问修饰符相关.
7.类定义的完善
class 类名{         class 类名{            待定...
属性;         ———>  属性(成员变量);  ————>
}                   成员方法;
                    }
三. 成员方法传参机制
1.基本数据类型，传递的是值(值拷贝)，形参的任何改变不影响实参!
2.引用数据类型的传参机制
引用类型传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参！
3.方法递归调用
3.1 基本介绍
简单的说:递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂问题,同时可以让代码变得简洁.
3.2 递归应用
(1).各种数学问题如:8皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题.
(2).各种算法也会使用到递归，比如快排，归并排序，二分查找，分治算法等.
(3).将用栈解决的问题-->递归代码比较简洁.
3.3 递归重要规则
(1).执行一个方法时，就创建一个新的受保护的独立空间(栈空间).
(2).方法的局部变量是独立的，不会相互影响，比如n变量.
(3).如果方法中使用的引用类型变量(比如数组，对象)就会共享该引用类型的数据.
(4).递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverflowError.
(5).当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就会将结果返回给谁，
    同时当方法执行完毕或者返回时，该方法也就执行完毕.
四.方法重载OverLoad
1.基本介绍
java中允许同一个类，多个同名方法的存在，但要求形参列表不一致!
比如:System.out.println();out是PrintStream类型.
2.重载的好处
(1).减轻了起名的麻烦
(2).减轻了记名的麻烦
3.注意事项和使用细节
(1).方法名:必须相同.
(2).参数列表:必须不同(参数类型或个数或顺序，至少有一样不同，参数名无要求).
(3).返回类型:无要求.
五. 可变参数
1.基本概念
java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。 就可以通过可变参数实现。
2.基本语法
访问修饰符 返回类型 方法名(数据类型... 形参名) {
 }
3.注意事项和使用细节
(1).可变参数的实参可以为0个或任意多个.
(2).可变参数的实参是数组.
(3).可变参数的本质就是数组.
(4).可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后.
(5).一个形参列表中只能出现一个可变参数.
六. 作用域
1.基本使用
(1).在java编程中，主要的变量就是属性(成员变量)和局部变量.
(2).我们说的局部变量一般是指在成员方法中定义的变量.[举例Cat类:cry]
(3).java中作用域的分类
    全局变量:也就是属性，作用域为整个类体Cat类:cry eat等方法使用属性.
    局部变量:也就是除了属性之外的其它变量，作用域为定义它的代码块中!
(4).全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值.
2.注意事项和细节使用
(1).属性和局部变量可以重名，访问时遵循就近原则.
(2).在同一个作用域中，比如在同一个成员方法中，两个局部变量不能重名.
(3).属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁.局部变量生命周期较短，
    伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁.即在一次方法调用过程中.
(4).作用域范围不同
    全局变量:可以被本类使用，或其他类使用(通过对象调用).
    局部变量:只能在本类中对应的方法中使用.
(5).修饰符不同
    全局变量/属性可以加修饰符(public，protected，private...)
    局部变量不可以加修饰符
七. 构造器
1.基本介绍
构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。
它有几个特点:
(1).方法名和类名相同. 
(2).没有返回值. 
(3).在创建对象时，系统会自动的调用该类的构造器完成对象的初始化。
2.基本语法
[修饰符] 方法名(形参列表){
       方法体;
 }
说明:
(1).构造器的修饰符可以默认，也可以是public，protected，private.
(2).构造器没有返回值，绝对没有return.
(3).方法名和类名字必须一样.
(4).参数列表和成员方法一样的规则. 
(5). 构造器的调用, 由系统完成.
3.注意事项和使用细节
(1).一个类可以定义多个不同的构造器，即构造器重载.
    比如:可以给Person类定义一个构造器，用来创建对象的时候，只指定人名，不需要指定年龄.
(2).构造器名和类名要相同.
(3).构造器没有返回值.
(4).构造器是完成对象的初始化，并不是创建对象.
(5).在构造对象时，系统自动调用该类的构造方法.
(6).如果程序员没有定义构造方法，系统会自动给类生成一个默认无参构造方法.(也叫默认构造方法)
    比如Person(){},使用javap指令反编译看看.
(7).一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，
    除非显式的定义一下，即Person(){}.
八. this
1.介绍
java虚拟机会给每个对象分配this，代表当前对象.使用this解决变量命名问题.
this小结:简单的说，哪个对象调用，this就代表哪个对象.
2.注意事项和使用细节
(1).this关键字可以用来访问本类的属性、方法、构造器.
(2).this用于区分当前类的属性和局部变量.
(3).访问成员方法的语法:this.方法名(参数列表);
(4).访问构造器语法:this(参数列表); 注意只能在构造器中使用.
    (即只能在构造器中访问另外一个构造器, 必须放在第一条语句)
(5).this不能在类定义的外部使用，只能在类定义的方法中使用.
