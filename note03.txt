一.运算符介绍
运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。
二.算术运算符
算数运算符是对数值类型的变量进行运算，java程序使用非常多.
运算符              运算                   范例               结果
  +                 正号                    +7                 7
  -                 负号                    b=11;-b            -11
  +                  加                     9+9                18
  -                  减                     10-8               2
  *                  乘                     7*8                56
  /                  除                     9/9                1
  %                  取模(取余)             11%9               2
  ++          自增(前):先运算后取值      a=2;b=++a;         a=3;b=3
  ++          自增(后):先取值后运算      a=2;b=a++;         a=3;b=2
  --          自增(前):先运算后取值      a=2;b=--a;         a=1;b=1
  --          自增(后):先取值后运算      a=2;b=a--;         a=1;b=2
  +              字符串相加              "hsp"+"edu"        "hspedu"
注意：作为独立的语句使用：前++和后++都完全等价于i=i+1;
      作为表达式使用：前++：++i先自增后赋值 
                      后++：i++先赋值后自增

三.关系运算符(比较运算符)
1.介绍
(1).关系运算符的结果都是boolean类型，也就是要么是true，要么是false.
(2).关系表达式经常用在if结构的条件中或循环结构的条件中
2.展示
运算符               运算                  范例                结果
  ==                相等于                 8==7                false
  !=                不等于                 8!=7                true
  <                  小于                  8<7                 false
  >                  大于                  8>7                 true
  <=               小于等于                8<=7                false
  >=               大于等于                8>=7                true
instanceof       检查是否是类的对象  "hsp" instanceoof String  true
细节说明：(1)关系运算符的结果都是boolean型，也就是要么是true，要么是false.
          (2)关系运算符组成的表达式，我们称为关系表达式：a>b.
          (3)比较运算符"=="不能误写"=".
四.逻辑运算符
1.介绍
用于连接多个条件(多个关系表达式)，最终的结果也是一个boolean值.
2.展示
2.1短路与&&，短路或||,取反！
(1).a&&b:&&叫短路与;规则:当a和b同时为true，则结果为true，否则为false.
(2).a||b:||叫短路或;规则:当a和b有一个为true，则结果为true，否则为false.
(3).!a:叫取反，或者非运算;规则:当a为true，则结果为false，当a为false时，结果为true.
2.2逻辑与&，逻辑或｜，^逻辑异或
(1).a&b:&叫逻辑与;规则:当a和b同时为true，则结果为true，否则为false.
(2).a|b:|叫逻辑或;规则:当a和b有一个为true，则结果为true，否则为false.
(3).a^b:^叫逻辑异或;规则:当a和b不同时，则结果为true，否则为false.
 a        b        a&b        a&&b        a|b        a||b        !a        a^b
true     true      true       true        true       true       false     false
true     false     false      false       true       true       false     true
false    true      false      false       true       true       true      true
false    false     false      false       false      false      true      false
2.3 &&和&
2.3.1 &&和&基本规则
名称                   语法                      特点
短路与&&           条件1&&条件2         两个条件都为true，结果为true，否则为false
逻辑与&            条件1&条件2          两个条件都为true，结果为true，否则为false
2.3.2 &&和&使用区别
(1).&&短路与:如果第一个条件为false，则第二个条件不会判断，最终结果为false.
(2).&逻辑与:不管第一个条件是否为false，第二个条件都要判断，效率低.
(3).开发中，我们使用的基本是短路与&&，效率高.
2.4 ||和|
2.4.1 ||和|基本规则
名称                   语法                      特点 
短路或||            条件1||条件2   两个条件中只要有一个成立，结果为true，否则为false
|逻辑或             条件1|条件2    只要有一个条件成立，结果为true，否则为false
2.4.2 ||和|使用区别
(1).||短路或:如果第一个条件为true，则第二个条件不会判断，最终结果为true，效率高.
(2).|逻辑或:不管第一个条件是否为true，第二个条件都要判断，效率低.
(3).开发中，我们基本使用||. 
五.赋值运算符
1.介绍
赋值运算符就是将某个运算后的值，赋给指定的变量.
2.分类
(1).基本运算符=
int a = 10;
(2).复合赋值运算符
+=，-=，*=，/=，%=等
a += b; [等价于a = a + b;]
a -= b; [等价于a = a - b;]
3.特点
(1).运算顺序从右往左 int num = a + b + c;
(2).赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值
int num1 = 20;int num2 = 78 * 34 - 10;int num3 = a;
(3).复合赋值运算符等价于下面的效果
比如:a += 3;等价于a = a + 3;
(4).复合赋值运算符会进行类型转换
byte b = 2;b += 3;b++;
六.三元运算符
1.基本语法
条件表达式？表达式1:表达式2;
2.运算规则
(1).如果条件表达式为true，运算后的结果是表达式1;
(2).如果条件表达式为false，运算后的结果是表达式2;
口诀:[一真大师] 真就返回表达式1
3.使用细节
(1).表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换)
(2).三元运算符可以转成if--else语句
int res = a > b? a++ : --b;
if(a>b)res = a++;
else res = --b;
七.运算符优先级
1.运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序.如下表，上一行运算表总优先于下一行.
        .  ()  {}  ; ,
R -> L  ++ -- ~ !(data type)
L -> R  * / %                 (单目运算符)
L -> R  + -                   (算术运算符)
L -> R  << >> >>>             (位移运算符)
L —> R  < > <= >= instanceof  (比较运算符)
L -> R  == !=   
L -> R  &                     (逻辑运算符)
L -> R  ^
L -> R  |
L -> R  &&
L -> R  ||
L -> R  ? :                   (三元运算符)
R -> L  =  *=  /=  %=         (赋值运算符)
        +=  -=  <<=  >>=
        >>>=  &=  ^=  |=
2.只有单目运算符、赋值运算符是从右向左运算的.
八.标识符的命名规则和规范
1.标识符概念
(1).Java对各种变量、方法和类等命名时使用的字符序列称为标识符.
(2).凡是自己可以起名字的地方都叫标识符 int num1 = 90;
2.标识符的命名规则
(1).由26个英文字母大小写，0-9，_或$组成.
(2).数字不可以开头.
(3).不可以使用关键字和保留字，但能包含关键字和保留字.
关键字:public、 class、 static...
保留字:goto、byValue、cast、future、generic、inner、operator、outer、rest、var、const...
(4).Java中严格区分大小写，长度无限制. int totalNum = 10;int n = 90;
(5).标识符不能包含空格. int a b = 90;
3.标识符命名规范
(1).包名：多单词组成时所有字母都小写: aaa.bbb.ccc//比如com.hsp.com
(2).类名、借口名:多单词组成时，所有单词的首字母大写:XxxYyyZzz [大驼峰]
    比如:TankshotGame
(3).变量名、方法名:多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写:xxxYyyZzz [小驼峰，简称驼峰法]
    比如:tankShotGame
(4).常量名:所有字母都大写.多单词时每个单词用下划线连接:XXX_YYY_ZZZ
    比如:定义一个所得税率TAX_RATE
九.键盘输入语句
1.介绍
在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取.
Input.java,需要一个扫描器(对象)，就是Scanner.
步骤：
(1).导入该类的所在包java.util.*
(2).创建该类对象(声明变量).
(3).调用里面的功能.
//演示从控制台接收用户信息(姓名、年龄、薪水)
import java.util.Scanner;//表示把java.util下的Scanner类导入
public class Input{
	public static void main(String[] args){
		Scanner myscanner = new Scanner(System.in);//System.in 表示从键盘输入
		System.out.println("请输入名字");
		String  name = myscanner.next();
		System.out.println("请输入年龄");
		int age = myscanner.nextInt();
		System.out.println("请输入薪水");
		double  sal = myscanner.nextDouble();
		System.out.println("人的信息如下");
		System.out.println("姓名:" + name + "\n年龄:" + age +"\n薪水:" + sal);
	}
}
十.进制
1.进制介绍
对于整数，有四种表示方式:
(1).二进制:0,1,满2进1.以0b或0B开头.
二进制是逢2进位的进位制，0、1是基本运算符.
现在的电子计算机技术全部采用二进制，因为它只使用0、1两个数字符号，非常简单方便，易于用电子方式实现.计算机内部处理的信息，都是采用二进制数来表示的.二进制数用0和1两个数字及其组合来表示任何数.进位规则是"逢2进1",数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增.
(2).十进制:0-9,满10进1.
(3).八进制:0-7,满8进1.以数字0开头表示.
(4).十六进制:0-9及A(10)-F(15),满16进1.以0x或0X开头表示.此处的A-F不区分大小写.
2.进制的转换
第一组
(1).二进制转十进制
规则:从最低位(右边)开始，将每个位上的数提取出来，乘以2的(位数-1)次方，然后求和.
0b1010=1*2的(1-1)次方+1*2的(2-1)次方+0*2的(3-1)次方+1*2的(4-1)次方=1+2+0+8=11
(2).八进制转十进制
规则:从最低位(右边)开始，将每个位上的数提取出来，乘以8的(位数-1)次方，然后求和.
0234=4*8^0+3*8^1+2*8^2=4+24+128=156
(3).十六进制转十进制
规则:从最低位(右边)开始，将每个位上的数提取出来，乘以16的(位数-1)次方，然后求和.
0x23A=10*16^0+3*16^1+2*16^2=10+48+512=570
练习:
1.0b110001100转成十进制
0b110001100=1*2^2+1*2^3+1*2^7+1*2^8=4+8+128+256=396
2.02456转成十进制
02456=6*8^0+5*8^1+4*8^2+2*8^3=6+40+256+1024=1326
3.0xA45转成十进制
0xA45=5*16^0+4*16^1+10*16^2=5+64+2560=2629
第二组
(1).十进制转二进制
规则:将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制.
将34转成二进制
34/2=17……0；17/2=8……1；8/2=4……0；4/2=2……0；2/2=1……0
34转成二进制为0b00100010 一个字节有八位，需要在高位补充2个0.
(2).十进制转八进制
规则:将该数不断除以8，直到商为0为止，然后将每步得到的余数倒过来，就是对应的八进制.
将131转成八进制
131/8=16……3；16/8=2……0
131转成八进制为0203
(3).十进制转十六进制
规则:将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制.
将237转成十六进制
237/16=14……13
237转成十六进制为0xED
练习:
1.123转成二进制
123/2=61……1；61/2=30……1；30/2=15……0；15/2=7……1；7/2=3……1；3/2=1……1
123转成二进制位0b01111011
2.678转成八进制
678/8=84……6；84/8=10……4；10/8=1……2
678转成八进制为01246
3.8912转成十六进制
8912/16=557……0；557/16=34……13；34/16=2……2
8912转成十六进制为0x22D0
第三组
(1).二进制转八进制
规则:从低位开始，将二进制数每三位一组，转成对应的八进制数即可.
将0b11010101转成八进制
0b11010101=0b11(3)010(2)101(5)=0325
(2).二进制转十六进制
规则:从低位开始，将二进制数每四位一组，转成对应的十六进制数即可.
0b11010101=0b1101(D)0101(5)=0xD5
练习:
1.0b11100101转成八进制
0b11100101=0b11(3)100(4)101(5)=0345
2.0b1110010110转成十六进制
0b1110010110=0b11(3)1001(9)0110(6)=0x396
第四组
(1).八进制转二进制
规则:将八进制每1位，转成对应的一个3位的二进制数即可.
将0237转成二进制
0237=02(010)3(011)7(111)=0b10011111
(2).十六进制转二进制
规则:将十六进制每1位，转成对应的一个4位的二进制数即可.
将0x23B转成二进制
0x23B=0x2(0010)3(0011)B(1011)=0b001000111011
练习:
1.01230转成二进制
01230=01(001)2(010)3(011)0(000)=0b1010011000
2.0xAB29转成二进制
0xAB29=0xA(1010)B(1011)2(0010)9(1001)=0b1010101100101001
3.原码、反码、补码（重点、难点）(背）
网上对原码、反码、补码的解释过于复杂，精简几句话:
对于有符号的而言:
1.二进制的做高位是符号位:0表示正数，1表示负数.(口诀:0 -> 0 1 -> -)
2.正数的原码，反码，补码都一样.(三码合一)
3.负数的反码=它的原码符号位不变，其它位取反(0 -> 1, 1 -> 0)
4.负数的补码=它的反码+1，负数的反码=负数的补码-1.
5.0的反码，补码都是0.
6.java没有无符号数，换言之，java中的数都是有符号的.
7.在计算机运算的时候，都是以补码的方式来运算的.
8.当我们看运算结果的时候，要看他的原码.
十一.位运算符
1.java中有7个位运算符(&、|、^、~、>>、<<和>>>）
2.分别是按位与&、按位或|、按位异或^、按位取反～,它们的运算规则是:
按位与&:两位全是1，结果为1，否则为0.
按位或|:两位有一个为1，结果为1，否则为0.
按位异或^:两位一个为0，一个为1，结果为1，否则为0.
按位取反～:0->1, 1->0.
比如:2&3=2    ~-2=1     ~2=-3     2|3=3   2^3=1
3.还有3个位运算符 >>、<<和>>>，运算规则:
算术右移>>:低位溢出，符号位不变。并用符号位补溢出的高位.
算术左移<<:符号位不变，低位补0.
>>>逻辑右移也叫无符号右移，运算规则是:低位溢出，高位补0.
特别说明:没有<<<符号