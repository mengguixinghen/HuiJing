//运算符
public class Operator{
	public static void main(String[] args){
		/**
        *. 演示算术运算符的使用
        */
		//  /使用
		System.out.println(10/4);//整数/整数=整数 输出2，小数点后数字抹掉
		System.out.println(10.0/4);//输出2.5
		//注释快捷键: 选中，command+/, 再次输入command+/取消注释.
		double d = 10/4; //java中10/4=2，2=>2.0
		System.out.println(d);//输出2.0

		// % 取模，取余
		//在%的本质，看一个公式 a%b=a-a/b*b
		//-10 % 3 => -10 - (-10) / 3 * 3 = -1
		System.out.println(10%3);//输出1
		System.out.println(-10%3);//输出-1
		System.out.println(10%-3);//输出1
		System.out.println(-10%-3);//输出-1

		//作为独立的语句使用:++的使用
		//
		int i = 10;
		i++;//自增，等价于 i = i + 1;//
		++i;//自增，等价于 i = i + 1;//
		System.out.println("i=" + i);//输出12

		//作为表达式使用：前++：++i先自增后赋值
        //             后++：i++先赋值后自增
        int j = 8;
        // int k1 = ++j;//等价于 j=j+1;k1=j;
        // System.out.println("j=" + j + "k1=" + k1);//j=9;k1=9
        int k2 = j++;//k2=j;j=j+1;
        System.out.println("j=" + j + "k2=" + k2);j=9;k2=8;


        /**
        *. 演示关系运算符的使用
        */
        /*
		int a = 9;
		int b = 8;
		System.out.println(a > b);//T
		System.out.println(a >= b);//T
		System.out.println(a <= b);//F
		System.out.println(a < b);//F
		System.out.println(a == b);//F
		System.out.println(a != b);//T
		boolean flag = a > b;//T
		System.out.println("flag=" + flag);
		*/



		/**
        *. 演示逻辑运算符的使用
        */
		/*
		//1.&&短路与和&逻辑与案例演示
		//&&短路与的使用
		int age = 50;

		if(age > 20 && age < 90){
			System.out.println("ok1");
			}
		//&逻辑与的使用
		if(age > 20 & age < 90){
		System.out.println("ok2");
		}
		//&&和&的区别
		int a = 4;
		int b = 9;
		//对于&&短路与而言，如果第一个条件为false，后面的条件不再判断
		if(a < 1 && ++b < 50){
			System.out.println("ok3");
			}
		System.out.println("a=" + a +" b=" + b);//a=4 b=9

		//对于&逻辑与而言，如果第一个条件为false，后面的条件仍然判断
		if(a < 1 & ++b < 50){
			System.out.println("ok3");
			}
		System.out.println("a=" + a +" b=" + b);//a=4 b=10

		//2.演示| || 使用

		if(age > 20 || age < 30){
			System.out.println("ok4");
			}
			
		if(age > 20 | age < 30){
			System.out.println("ok5");
			}

		// ||和｜的区别
		//对于||短路或而言，如果第一个条件为true，后面的条件不再判断
		int a1 = 4;
		int b1 = 9;
		if(a1 > 1 || ++b1 > 4){
			System.out.println("ok6");
			}
		System.out.println("a1=" + a1 +" b1=" + b1);//a1=4 b1=9

        //对于|逻辑或而言，不管第一个条件是否为true，第二个条件都要判断
		if(a1 > 1 | ++b1 > 4){
					System.out.println("ok7");
					}
		System.out.println("a1=" + a1 +" b1=" + b1);//a1=4 b1=10

		//3.!和^案例演示
		System.out.println(60 > 20);//T 
		System.out.println(!(60 > 20));//F
		boolean b2 = (10 > 1) ^ (3 < 5);
		System.out.println("b2=" + b2);//F
		boolean b3 = (10 > 1) ^ (3 > 5);
		System.out.println("b3=" + b3);//T
		*/
		//逻辑运算符练习题
		/*
		//1.写出每题的输出结果
        int x1 = 5;
        int y1 = 5;
        //逻辑与
        //x++==6:先比较x和6的值，再++
        //++y==6:y先++，再比较y和6的值
        if(x1++ == 6 & ++y1 == 6){
        	x1 = 11;                
        }
        System.out.println("x1=" + x1 + ",y1=" + y1);//x1=6,y1=6
        // //短路与
        int x2 = 5;
        int y2 = 5;
        if(x2++ == 6 && ++y2 == 6){
        	x2 = 11;
        }
        System.out.println("x2=" + x2 + ",y2=" + y2);//x2=6,y2=5
        //逻辑或
        int x3 = 5;
        int y3 = 5;
        if(x3++ == 5 | ++y3 == 5){
        	x3 = 11;
        }
        System.out.println("x3=" + x3 + ",y3=" + y3);//x3=11,y3=6
        //短路或
        int x4 = 5;
        int y4 = 5;
        if(x4++ == 5 || ++y4 == 5){
        	x4 = 11;
        }
        System.out.println("x4=" + x4 + ",y4=" + y4);//x4=11,y4=5

        //2.请写出输出结果
        boolean x = true;
        boolean y = false;
        short z = 46;
        //y=true是赋值语句，不是判断语句，所以&&的结果是真
        if((z++ == 46) && (y = true)) z++;//z=48
        if((x = false) || (++z == 49)) z++;//z=50
        System.out.println("z=" + z);//z=50
        */


        /**
        *. 演示赋值运算符的使用
        */
        /*
		int n1 = 10;
		n1 += 4;// n1 = n1 + 4;
		System.out.println(n1);//14
		n1 /= 3;// n1 = n1 / 3;n1 = 14 / 3;
		System.out.println(n1);//4

		//复合赋值运算符会进行类型转换
		byte b = 3;
		//b = b + 2;//❌ int -> byte
		b += 2;//对，等价于 b = (byte)(b + 2);
		b++;// b = (byte)(b+1);
		*/



        /**
        *. 三元运算符使用
        */
		/*
		int a = 10;
		int b = 99;
		//解读
		//1. a > b 为 false
		//2. 返回 b--,先返回b的值，然后再b-1.
		int result1 = a > b ? a++ : b--;
		System.out.println("result1=" + result1);//99
		System.out.println("a=" + a + " b=" + b);//a=10 b=98
		//解读
		//1. a < b 为 true
		//2. 返回 a++,先返回a的值，然后再a+1.
		int result2 = a < b ? a++ : b--;
		System.out.println("result2=" + result2);//10
		System.out.println("a=" + a + " b=" + b);//a=11 b=98
		
//三元运算符细节
		//表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换/或者强制转换)
		int a1 = 3;
		int b1 = 8;
		int c1 = a1 > b1 ? a1 : b1;
		//int c1 = a1 > b1 ? 1.1 : 3.4;//❌
		int c2 = a1 > b1 ? (int)1.1 : (int)3.4;//对
		double c3 = a1 > b1 ? a : b + 3;//对，满足 int -> double

//课堂练习
		//实现三个数的最大值
		int x = 8;
		int y = 10;
		int z = 5;
		int max1 = x > y? x: y;
		int max2 = max1 > z? max1 : z;
		System.out.println("最大数="+max2);
		//使用一条语句实现
		// int max = ( x > y? x: y) > z? ( x > y? x: y)  : z;
		// System.out.println("最大数="+max);
		*/

		/**
        *. 演示四种进制
        */
        /*
		//n1 二进制
		int n1 = 0b1010011000;
		//n2 十进制
		int n2 = 1010;
		//n3 八进制
		int n3 = 01230;
		//n4 十六进制
		int n4 = 0x22D0;
		System.out.println("n1=" + n1);
		System.out.println("n2=" + n2);
		System.out.println("n3=" + n3);
		System.out.println("n4=" + n4);
		*/




		/**
        *. 演示位运算
        */
        /*
		//1.先得到2的补码 =>2的原码(int是4位,2是正数)00000000 00000000 00000000 00000010
		//  2的补码 00000000 00000000 00000000 00000010
		//2.3的补码 3的原码 00000000 00000000 00000000 00000011
		//3.按位与
		//00000000 00000000 00000000 00000010
		//00000000 00000000 00000000 00000011
		//00000000 00000000 00000000 00000010 运算后的补码
		//因为是正数，运算后的原码也是00000000 00000000 00000000 00000010 
		//结果就是2
		System.out.println(2&3);

		//1.先得到-2的补码 =>-2的原码 10000000 00000000 00000000 00000010
		//  -2的反码 11111111 11111111 11111111 11111101
		//  -2的补码 11111111 11111111 11111111 11111110
		//2.按位取反 00000000 00000000 00000000 00000001 补码
		//3.原码 00000000 00000000 00000000 00000001 
		//结果是1
		System.out.println(~-2);

		//1.2的补码 2的原码 00000000 00000000 00000000 00000010
		//2.按位取反 11111111 11111111 11111111 11111101 补码
		//3. 反码 11111111 11111111 11111111 11111100
		//原码 10000000 00000000 00000000 00000011
		//结果是-3
		System.out.println(~2);

		//1.2的补码 00000000 00000000 00000000 00000010
		//2.3的补码 00000000 00000000 00000000 00000011
		//3.按位或
		//00000000 00000000 00000000 00000010
		//00000000 00000000 00000000 00000011
		//00000000 00000000 00000000 00000011 补码
		//00000000 00000000 00000000 00000011 原码
		//结果是3
		System.out.println(2|3);

		//1.2的补码 00000000 00000000 00000000 00000010
		//2.3的补码 00000000 00000000 00000000 00000011
		//3.按位异或
		//00000000 00000000 00000000 00000010
		//00000000 00000000 00000000 00000011
		//00000000 00000000 00000000 00000001 运算后的补码
		//00000000 00000000 00000000 00000001 运算后的原码
		//结果是1
		System.out.println(2^3);

		//-5的原码 10000000 00000000 00000000 00000101
		//-5的反码 11111111 11111111 11111111 11111010
		//-5的补码 11111111 11111111 11111111 11111011
		//按位取反 00000000 00000000 00000000 00000100 补码
		//原码    00000000 00000000 00000000 00000100
		//结果是4
		System.out.println(~-5);

		//13的补码 00000000 00000000 00000000 00001101
		//7的补码  00000000 00000000 00000000 00000111
		//按位与
		//00000000 00000000 00000000 00001101
		//00000000 00000000 00000000 00000111
		//00000000 00000000 00000000 00000101 补码
		//00000000 00000000 00000000 00000101 原码
		//结果是5
		System.out.println(13&7);

		//5的补码 00000000 00000000 00000000 00000101
		//4的补码 00000000 00000000 00000000 00000100
		//按位或
		//00000000 00000000 00000000 00000101
		//00000000 00000000 00000000 00000100
		//00000000 00000000 00000000 00000101 补码
		//00000000 00000000 00000000 00000101 原码
		//结果是5
		System.out.println(5|4);

		//1.先得到-3的补码 =>-3的原码 10000000 00000000 00000000 00000011
		//  -3的反码 11111111 11111111 11111111 11111100
		//  -3的补码 11111111 11111111 11111111 11111101
		//2.3的补码 00000000 00000000 00000000 00000011
		//按位异或
		// 11111111 11111111 11111111 11111101
		// 00000000 00000000 00000000 00000011
		// 11111111 11111111 11111111 11111110 补码
		// 11111111 11111111 11111111 11111101 反码
		// 10000000 00000000 00000000 00000010 原码
		//结果是-2
		System.out.println(-3^3);

		//位运算的思考题
		//1.请看下面的代码段，回答a,b,c,d,e结果是多少?
		//00000000 00000000 00000000 00000001
		//00000001=>00000000 本质1/2/2=0
		int a = 1 >> 2;//向右位移2位
		//-1的原码 10000000 00000000 00000000 00000001
		//-1的反码 11111111 11111111 11111111 11111110
		//-1的补码 11111111 11111111 11111111 11111111
		//算术右移 11111111 11111111 11111111 11111111
		//反码     11111111 11111111 11111111 11111110
		//原码     10000000 00000000 00000000 00000001
		//结果是-1
		int b = -1 >> 2;//算术右移 
		//00000001=>00000100 本质1*2*2=4
		int c = 1 << 2;//算术左移 
		int d = -1 << 2; // -1*2*2=-4
		int e = 3 >>> 2;//无符号右移 3/2/2=0
		//a,b,c,d,e结果是多少？
		System.out.println("a=" + a);
		System.out.println("b=" + b);
		System.out.println("c=" + c);
		System.out.println("d=" + d);
		System.out.println("e=" + e);	

		//2.在java中，下面的表达式运算的结果是:(位操作)
		// ～2 = -3 //按位取反
		// 2 & 3 = 2 //2按位与3
		// 2 ｜ 3 = 3 //2按位或3
		// ～ - 5 = 4
		// 13 & 7 = 5
		// 5 ｜ 4 = 5
		// -3^3 = -2 //按位异或
		*/


		/**
        *. 第三章作业
        */
		/*
		//1.计算下列表达式的结果
		//10/3=3; 10/5=2; 10%2=0; -10.5%3=-1.5
		//a%b，当a是小数时，公式=a-(int)a/b*b
		//-10.5%3=-10.5-（-10）/3*3=-10.5+9=-1.5
		//注意:有小数运算时，得到的结果是近似值.

		//2.试说出下面代码的结果
		int i = 66;
		System.out.println(++i+i);//67+67=134

		//3.在java中，以下赋值语句正确的是(C、D)
		//A. int num1 = (int)"18";//❌ 应该 Integer.parseInt("18")
		//B. int num2 = 18.0; //❌
		//C. double num3 = 3d;//对
		//D. double num4 = 8; //对
		//E. int i = 48; char ch = i+1;//❌
		//F. byte b = 19; short s = b + 2;//❌

		//4.试写出将String转换成double类型的语句，以及将char类型转换成String的语句
		String a1 = "12.4";
		double b1 = Double.parseDouble(a1);
		System.out.println(b1);
		char c1 = '雨';
		String d1 = c1 + "";
		System.out.println(d1);
		*/
	}
}